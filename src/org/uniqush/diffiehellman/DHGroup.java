package org.uniqush.diffiehellman;

import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.util.Random;


public class DHGroup {
	protected BigInteger modulus;
	protected BigInteger generator;

	public DHGroup(BigInteger p, BigInteger g) {
		this.modulus = p;
		this.generator = g;
	}
	
	static public DHGroup getGroup(int groupid) throws NoSuchAlgorithmException {
		switch (groupid) {
		case 0:
		case 14:
			BigInteger p = new BigInteger("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF", 16);
			BigInteger g = new BigInteger("2");
			DHGroup ret = new DHGroup(p, g);
			return ret;
		}
		throw new NoSuchAlgorithmException();
	}
	
	public DHPrivateKey generatePrivateKey(Random random) {
        int bits = modulus.bitLength();
        BigInteger max = modulus.subtract(BigInteger.ONE);
        DHPrivateKey privkey = null;
        while (true) {
            BigInteger pkey = new BigInteger(bits, random);
            if (pkey.compareTo(max) >= 0) { //too large
                continue;
            }
            else if (pkey.compareTo(BigInteger.ONE) <= 0) {//too small
                continue;
            }
            privkey = new DHPrivateKey(pkey, this);
            break;
        }
        return privkey;
	}
	
	public byte[] computeKey(DHPublicKey pub, DHPrivateKey priv) {
		BigInteger k = pub.y.modPow(priv.x, this.modulus);
		byte[] b = k.toByteArray();
		if (b[0] == 0) {
		    byte[] tmp = new byte[b.length - 1];
		    System.arraycopy(b, 1, tmp, 0, tmp.length);
		    b = tmp;
		}
		byte[] ret = new byte[(modulus.bitLength() + 7)/8];
		
		int nrZeros = ret.length - b.length;
		for (int i = 0; i < nrZeros; i++) {
			ret[i] = 0;
		}
		for (int i = 0; i < b.length; i++) {
			ret[i + nrZeros] = b[i];
		}
		return ret;
	}

	private static void printBytes(byte[] data) {
		if (data == null) {
			System.out.printf("null");
			return;
		}
		for (int i = 0; i < data.length; i++) {
			int d = data[i] & 0xFF;
			System.out.printf("%d ", d);
		}
	}
	public static void main(String[] argv) {
		BigInteger x = new BigInteger("3267338060653588598197373180754481145530301547610081050890302749054506627530433824949367369856109324957677849075879062677444135124482637745255571050548119677946513447320589862720401553578326243502574285032205420999825363599379845199430083133768095478959549243327952787961509013638517585861316989825813572166618928121738296238911505495293323942606432712966164055937109230493809175847467311727268459075093010761550209828132578703653206090198214546664551314436131574456336414015525738838516951308177769939482357382941484277357960509499684367984338906981108780384773787961345881827668694193418948169427382742718577344904");
		BigInteger y = new BigInteger("4940278971544327983755791423255847079226372616951279858406286748338950838197222586112066279957191347902570844038816844920722980255505951378277033051787593865825851157270638817173154976058714459363427984272679062744218090673078950450442776017185101599404125594476076923621364778411089416395646392191014736347744374664933561447118867897399765254619335000705407345995094302938426988997673300719201872502580277516884500090274708996039978240691313555157172663159967966332203875293662065058870442994795445151533267702792086463388242041115007085825867553909852372483531564368828535392419646781638512644625264619137835846689");
		BigInteger k = new BigInteger("24852234029945327044530721577478589051014169640221341446799490718409507193239080397735078632741319059570367691001727014479530738161278132828977849447795854477296060745811160933574113120769166422984244803681412692699674837281063445760070603656820697169688171085514553548342398914643048842022844517003044857113028010319262787825858996404160503272530692432893014770036804861385520716792974086736073206741780117935754833202263362971021756367035034597574474637585970191258198435937522539373840765942796908727710619061031287451784806678901419233100623987291493900990166376241939602241580958994355471467459997570813247839942");
		BigInteger m = new BigInteger("32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559");
		System.out.printf("#bits of mod = %d\n", m.bitLength());
		System.out.printf("#bytes of mod = %d\n", (m.bitLength() + 7)/8);
		System.out.printf("#bytes of k = %d\n", k.toByteArray().length);
		System.out.printf("of k = ");
		printBytes(k.toByteArray());
		System.out.println();
	}
}
